/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.82.0
  Forc version: 0.49.3
  Fuel-Core version: 0.22.1
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
  StdString,
} from 'fuels';

import type { Option, Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { value: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type PoolInput = { reserve_a: BigNumberish, reserve_b: BigNumberish, total_supply: BigNumberish };
export type PoolOutput = { reserve_a: BN, reserve_b: BN, total_supply: BN };
export type RawBytesInput = { ptr: BigNumberish, cap: BigNumberish };
export type RawBytesOutput = { ptr: BN, cap: BN };

interface AMMContractAbiInterface extends Interface {
  functions: {
    decimals: FunctionFragment;
    name: FunctionFragment;
    symbol: FunctionFragment;
    total_assets: FunctionFragment;
    total_supply: FunctionFragment;
    add_liquidity: FunctionFragment;
    deposit: FunctionFragment;
    get_pool: FunctionFragment;
    remove_liquidity: FunctionFragment;
    swap: FunctionFragment;
    withdraw: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'decimals', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'name', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'symbol', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'total_assets', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'total_supply', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'add_liquidity', values: [AssetIdInput, AssetIdInput, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'deposit', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_pool', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'remove_liquidity', values: [AssetIdInput, AssetIdInput, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'swap', values: [AssetIdInput, AssetIdInput, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw', values: [IdentityInput, AssetIdInput]): Uint8Array;

  decodeFunctionData(functionFragment: 'decimals', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'name', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'symbol', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_assets', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_supply', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'add_liquidity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'deposit', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_pool', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'remove_liquidity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'swap', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw', data: BytesLike): DecodedValue;
}

export class AMMContractAbi extends Contract {
  interface: AMMContractAbiInterface;
  functions: {
    decimals: InvokeFunction<[asset: AssetIdInput], Option<number>>;
    name: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    symbol: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    total_assets: InvokeFunction<[], BN>;
    total_supply: InvokeFunction<[asset: AssetIdInput], Option<BN>>;
    add_liquidity: InvokeFunction<[asset_a: AssetIdInput, asset_b: AssetIdInput, recipient: IdentityInput], BN>;
    deposit: InvokeFunction<[], void>;
    get_pool: InvokeFunction<[asset_id: AssetIdInput], Option<PoolOutput>>;
    remove_liquidity: InvokeFunction<[asset_a: AssetIdInput, asset_b: AssetIdInput, recipient: IdentityInput], [BN, BN]>;
    swap: InvokeFunction<[asset_a: AssetIdInput, asset_b: AssetIdInput, recipient: IdentityInput], BN>;
    withdraw: InvokeFunction<[recipient: IdentityInput, asset_id: AssetIdInput], void>;
  };
}
